"""Claude Code adapter."""

from pathlib import Path

from rich.console import Console

from ideporter.adapters.base import BaseAdapter
from ideporter.utils import safe_read, safe_write

console = Console()


class ClaudeAdapter(BaseAdapter):
    """Adapter for Claude Code.

    Note: Claude's internal format is opaque, so we generate a CLAUDE_IMPORT.md
    file with instructions for manual import.
    """

    @property
    def name(self) -> str:
        """Get the adapter name."""
        return "claude"

    def detect(self) -> bool:
        """Detect if Claude artifacts exist."""
        claude_dir = self.project_path / ".claude"
        return claude_dir.exists()

    def import_context(
        self, canonical_dir: Path, force: bool = False, dry_run: bool = False
    ) -> None:
        """Import from Claude (limited support - manual process recommended)."""
        console.print(
            "[yellow]⊘[/yellow] Claude Code uses an opaque internal format. "
            "Manual export recommended."
        )
        console.print(
            "[dim]Tip: Copy your Claude project instructions manually to ai/context/rules.md[/dim]"
        )

    def export_context(
        self, canonical_dir: Path, force: bool = False, dry_run: bool = False
    ) -> None:
        """Export to Claude by generating a CLAUDE_IMPORT.md instruction file."""
        rules_file = canonical_dir / "rules.md"
        context_file = canonical_dir / "context.md"

        if not rules_file.exists():
            console.print("[yellow]⊘[/yellow] No rules.md to export")
            return

        # Read canonical content
        rules_content = safe_read(rules_file)
        context_content = ""
        if context_file.exists():
            context_content = safe_read(context_file)

        # Generate import instructions
        import_instructions = self._generate_import_instructions(rules_content, context_content)

        # Write to ai/context/CLAUDE_IMPORT.md
        import_file = canonical_dir / "CLAUDE_IMPORT.md"
        safe_write(import_file, import_instructions, force=force, dry_run=dry_run)

        console.print("[green]✓[/green] Generated CLAUDE_IMPORT.md with manual import instructions")
        console.print(
            f"[dim]→ Open {import_file} and copy the content to Claude Code's project settings[/dim]"
        )

    def _generate_import_instructions(self, rules: str, context: str) -> str:
        """Generate import instructions for Claude Code.

        Args:
            rules: Rules content
            context: Context content

        Returns:
            Formatted import instructions
        """
        instructions = """# Claude Code Import Instructions

## How to Import This Context

1. Open your project in Claude Code
2. Access Project Settings or Custom Instructions
3. Copy the content below and paste it into Claude's project instructions

---

## AI Project Rules

"""
        instructions += rules

        if context:
            instructions += "\n\n---\n\n## Additional Context\n\n"
            instructions += context

        instructions += """

---

## Notes

- This file was auto-generated by IDE Context Porter
- Keep this file in sync with ai/context/rules.md and ai/context/context.md
- To update Claude, re-run: `ide-context-porter export --to claude`
"""

        return instructions
